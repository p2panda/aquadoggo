"""
AliasedAuthor is one of either the public_key or an alias

The intention of this is to reduce bandwidth when making requests by using a short "alias"
rather than the full author public_key

To get an alias of an author, use the `author_aliases` method which will return this type.

When using as an input to a query, exactly one of public_key or alias must be set otherwise it is an error.
"""
type AliasedAuthor {
	"""
	The author's public key
	"""
	publicKey: PublicKey!
	"""
	The author alias
	"""
	alias: ID!
}
"""
Either the `public_key` or the `alias` of that author.
"""
input Author {
	"""
	The author's public key
	"""
	publicKey: PublicKey
	"""
	The author alias
	"""
	alias: ID
}
scalar Entry
"""
An entry with an optional payload
"""
type EntryAndPayload {
	"""
	Get the entry
	"""
	entry: Entry!
	"""
	Get the payload
	"""
	payload: Payload
}
type EntryAndPayloadConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [EntryAndPayloadEdge]
}
"""
An edge in a connection.
"""
type EntryAndPayloadEdge {
	"""
	The item at the end of the edge
	"""
	node: EntryAndPayload!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}
type EntryArgsResponse {
	logId: String!
	seqNum: String!
	backlink: String
	skiplink: String
}
scalar EntryHash
scalar LogId
"""
All of the graphql mutation sub modules merged into one top level root
"""
type MutationRoot {
	"""
	Publish an entry using parameters obtained through `nextEntryArgs` query.
	
	Returns arguments for publishing the next entry in the same log.
	"""
	publishEntry(entryEncoded: String!, operationEncoded: String!): PublishEntryResponse!
}
"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}
scalar Payload
scalar PublicKey
type PublishEntryResponse {
	logId: String!
	seqNum: String!
	backlink: String
	skiplink: String
}
"""
All of the graphql query sub modules merged into one top level root
"""
type QueryRoot {
	"""
	Get an entry by its hash
	"""
	entryByHash(hash: EntryHash!): SingleEntryAndPayload
	"""
	Get any entries that are newer than the provided sequence_number for a given author and
	log_id
	
	If you don't provide sequence_number then get all entries starting at the first
	"""
	getEntriesNewerThanSeq(logId: LogId!, author: Author!, sequenceNumber: SequenceNumber, first: Int, after: String): EntryAndPayloadConnection!
	"""
	Get a single entry by its log_id, sequence_number and author
	"""
	entryByLogIdAndSequence(logId: LogId!, sequenceNumber: SequenceNumber!, author: Author!): SingleEntryAndPayload
	"""
	Get aliases of the provided `public_keys` that you can use in future requests to save
	bandwidth.
	"""
	authorAliases(publicKeys: [PublicKey!]!): [AliasedAuthor!]!
	"""
	Return required arguments for publishing the next entry.
	"""
	nextEntryArgs(publicKey: String!, documentId: String): EntryArgsResponse!
}
scalar SequenceNumber
type SingleEntryAndPayload {
	"""
	The entry
	"""
	entry: Entry!
	"""
	The payload
	"""
	payload: Payload
	"""
	Get the certificate pool for this entry that can be used to verify the entry is valid
	"""
	certificatePool: [Entry!]!
}
schema {
	query: QueryRoot
	mutation: MutationRoot
}

